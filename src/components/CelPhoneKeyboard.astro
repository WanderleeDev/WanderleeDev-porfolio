---
import KeyboardRow from '../shared/KeyboardRow.astro'
import { keyboardData } from '../data/keyboardData.ts'

const { controls, letters, specialCharacter } = keyboardData

---
<aside class="bg-[#1E1E1E] absolute top-0 -translate-y-full grid w-full select-none">

  <form
    id="searcbarWrapper" 
    class="w-full grid grid-cols-[auto_1fr] gap-2 px-4 py-2" 
    autocomplete="off"
  >
    <button
      id="btn-reload"
      class="text-[#9A9A9A] w-8 h-8 rounded-[50%] border-2 border-current hover:text-white"
      aria-label="reload" 
      type="submit"
    >
      &#10227;
    </button>
    <input
      class="w-full px-2" 
      id="searchBar" 
      type="text" 
      name="text"
    >
  </form>

  <div id="keyboard" class="text-white grid gap-2">
    <KeyboardRow keyboardLetters={ letters.slice(0, 10) }/>
    <KeyboardRow keyboardLetters={ letters.slice(10, 19) } />
    <KeyboardRow keyboardLetters={ letters.slice(19, 28) } />
  <div class="grid gap-2 grid-cols-[auto_auto_1fr_auto_auto] px-4 pb-2 ">
    
  {controls.map(control => (
    <button 
      data-caracter={control} 
      class="bg-[#464646] hover:bg-[#EEEEEE] hover:text-[#1E1E1E] py-4 px-1 min-w-[2rem] text-xs sm:text-lg"
      aria-label=`letter ${control}`
      type="button"
    >
      {control}
    </button>)
  )}
</div>

    <!-- <div 
      data-board="back" 
      class="grid grid-rows-4 gap-2 grid-cols-10 px-4 py-2"
    >
      {keyboardSpecialCaracter.map(caracter => (
        <button 
          data-caracter={caracter} 
          class="bg-[#464646] hover:bg-[#EEEEEE] hover:text-[#1E1E1E] text-xs sm:text-lg" 
          type="button"
        >
          {caracter}
        </button>)
      )}
    </div> -->
  </div>

</aside>

<script>
  import { match, P } from 'ts-pattern'

  const searchBarWrapper = document.querySelector('#searcbarWrapper') as HTMLFormElement
  const searchBar = document.querySelector('#searchBar') as HTMLInputElement
  const keyBoard = document.querySelector('#keyboard') as HTMLDivElement

  const validityUrl = (link: string): boolean => URL.canParse(link)
  const searchBarHandler = (value: string) => {
    if (!value || value === '') return
    if (validityUrl(value)) window.location.href = value
  }

  const keyboardHandler = (e: MouseEvent): void => {
    if (e.target instanceof HTMLButtonElement && e.target.dataset.caracter) {
      const currentValue = e.target.getAttribute('data-caracter')

      if (currentValue === null) return

      // Pattern Matching 
      match(currentValue)
        .with('space', () => searchBar.value += ' ')
        .with('âŒ«', () => searchBar.value = searchBar.value.slice(0, -1))
        .with('ðŸ¡±', () => searchBar.value += 'si')
        .with('ðŸ¡²', () => searchBar.value += 'search')
        .with('&123', () => searchBar.value += 'change')
        .with(P.string, () => searchBar.value += currentValue)
        .exhaustive();
    }
  }

  keyBoard?.addEventListener('click', keyboardHandler)
  searchBarWrapper?.addEventListener('submit', (e: Event) => {
    e.preventDefault()
    searchBarHandler(searchBar.value.trim())
  })
</script>